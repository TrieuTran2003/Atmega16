
AVRASM ver. 2.1.30  C:\Users\ACER\Documents\List\thicuoiky2.asm Mon Dec 25 23:20:02 2023

C:\Users\ACER\Documents\List\thicuoiky2.asm(1059): warning: Register r4 already defined by the .DEF directive
C:\Users\ACER\Documents\List\thicuoiky2.asm(1060): warning: Register r6 already defined by the .DEF directive
C:\Users\ACER\Documents\List\thicuoiky2.asm(1061): warning: Register r8 already defined by the .DEF directive
C:\Users\ACER\Documents\List\thicuoiky2.asm(1062): warning: Register r10 already defined by the .DEF directive
C:\Users\ACER\Documents\List\thicuoiky2.asm(1063): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _chuc=R4
                 	.DEF _dvi=R6
                 	.DEF _dem=R8
                 	.DEF _i=R10
                 	.DEF _timer1=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003e 	JMP  __RESET
000002 940c 0080 	JMP  _ext_int1_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 00ad 	JMP  _timer1_ovf_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 00b9 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
C:\Users\ACER\Documents\List\thicuoiky2.asm(1101): warning: .cseg .db misalignment - padding zero byte
000033 00bd      	.DB  0xBD
                 _0x4D:
000034 0000
000035 0000
000036 00f0      	.DB  0x0,0x0,0x0,0x0,0xF0,0x0
                 
                 __GLOBAL_INI_TBL:
000037 0001      	.DW  0x01
000038 016c      	.DW  _timer2
000039 0066      	.DW  _0x3*2
                 
00003a 0006      	.DW  0x06
00003b 0008      	.DW  0x08
00003c 0068      	.DW  _0x4D*2
                 
                 _0xFFFFFFFF:
00003d 0000      	.DW  0
                 
                 __RESET:
00003e 94f8      	CLI
00003f 27ee      	CLR  R30
000040 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000041 e0f1      	LDI  R31,1
000042 bffb      	OUT  GICR,R31
000043 bfeb      	OUT  GICR,R30
000044 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000045 e1f8      	LDI  R31,0x18
000046 bdf1      	OUT  WDTCR,R31
000047 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000048 e08d      	LDI  R24,(14-2)+1
000049 e0a2      	LDI  R26,2
00004a 27bb      	CLR  R27
                 __CLEAR_REG:
00004b 93ed      	ST   X+,R30
00004c 958a      	DEC  R24
00004d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000050 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000051 93ed      	ST   X+,R30
000052 9701      	SBIW R24,1
000053 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000054 e6ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000055 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000056 9185      	LPM  R24,Z+
000057 9195      	LPM  R25,Z+
000058 9700      	SBIW R24,0
000059 f061      	BREQ __GLOBAL_INI_END
00005a 91a5      	LPM  R26,Z+
00005b 91b5      	LPM  R27,Z+
00005c 9005      	LPM  R0,Z+
00005d 9015      	LPM  R1,Z+
00005e 01bf      	MOVW R22,R30
00005f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000060 9005      	LPM  R0,Z+
000061 920d      	ST   X+,R0
000062 9701      	SBIW R24,1
000063 f7e1      	BRNE __GLOBAL_INI_LOOP
000064 01fb      	MOVW R30,R22
000065 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000066 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000067 bfed      	OUT  SPL,R30
000068 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000069 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006b e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006c 940c 014f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;unsigned long ADC_out=0;
                 ;unsigned int chuc, dvi;
                 ;unsigned long nhietdo;
                 ;unsigned long dienap;
                 ;unsigned int dem=0;
                 ;int i;
                 ;int timer1 = 0xF0;
                 ;int timer2 = 0xBD;
                 
                 	.DSEG
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;#define ADC_VREF_TYPE 0x00
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0014 {
                 
                 	.CSEG
                 _read_adc:
                 ; 0000 0015 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
00006e 81e8      	LD   R30,Y
00006f b9e7      	OUT  0x7,R30
                 ; 0000 0016 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0017 delay_us(10);
                +
000070 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000071 958a     +DEC R24
000072 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0018 // Start the AD conversion
                 ; 0000 0019 ADCSRA|=0x40;
000073 9a36      	SBI  0x6,6
                 ; 0000 001A // Wait for the AD conversion to complete
                 ; 0000 001B while ((ADCSRA & 0x10)==0);
                 _0x4:
000074 9b34      	SBIS 0x6,4
000075 cffe      	RJMP _0x4
                 ; 0000 001C ADCSRA|=0x10;
000076 9a34      	SBI  0x6,4
                 ; 0000 001D return ADCW;
000077 b1e4      	IN   R30,0x4
000078 b1f5      	IN   R31,0x4+1
000079 c004      	RJMP _0x2060001
                 ; 0000 001E }
                 ;
                 ;void uart_char_send(unsigned char chr){
                 ; 0000 0020 void uart_char_send(unsigned char chr){
                 _uart_char_send:
                 ; 0000 0021     while (!(UCSRA &(1<<UDRE))) {};
                 ;	chr -> Y+0
                 _0x7:
00007a 9b5d      	SBIS 0xB,5
00007b cffe      	RJMP _0x7
                 ; 0000 0022         UDR=chr;
00007c 81e8      	LD   R30,Y
00007d b9ec      	OUT  0xC,R30
                 ; 0000 0023 }
                 _0x2060001:
00007e 9621      	ADIW R28,1
00007f 9508      	RET
                 ;
                 ;void uart_string_send(unsigned char *txt){
                 ; 0000 0025 void uart_string_send(unsigned char *txt){
                 ; 0000 0026     unsigned char n, i;
                 ; 0000 0027     n=strlen(txt);
                 ;	*txt -> Y+2
                 ;	n -> R17
                 ;	i -> R16
                 ; 0000 0028         for (i=0; i<n; i++){
                 ; 0000 0029         uart_char_send(txt[i]);
                 ; 0000 002A         }
                 ; 0000 002B }
                 ;
                 ;// Ngat ngoai
                 ;interrupt [EXT_INT0] void ext_int1_isr(void)
                 ; 0000 002F {
                 _ext_int1_isr:
000080 920a      	ST   -Y,R0
000081 921a      	ST   -Y,R1
000082 92fa      	ST   -Y,R15
000083 936a      	ST   -Y,R22
000084 937a      	ST   -Y,R23
000085 938a      	ST   -Y,R24
000086 939a      	ST   -Y,R25
000087 93aa      	ST   -Y,R26
000088 93ba      	ST   -Y,R27
000089 93ea      	ST   -Y,R30
00008a 93fa      	ST   -Y,R31
00008b b7ef      	IN   R30,SREG
00008c 93ea      	ST   -Y,R30
                 ; 0000 0030 i+=1;
00008d 01f5      	MOVW R30,R10
00008e 9631      	ADIW R30,1
00008f 015f      	MOVW R10,R30
                 ; 0000 0031 chuc=(i/10);
000090 01d5      	MOVW R26,R10
000091 e0ea      	LDI  R30,LOW(10)
000092 e0f0      	LDI  R31,HIGH(10)
000093 940e 0249 	CALL __DIVW21
000095 012f      	MOVW R4,R30
                 ; 0000 0032 dvi=(i%10);
000096 01d5      	MOVW R26,R10
000097 e0ea      	LDI  R30,LOW(10)
000098 e0f0      	LDI  R31,HIGH(10)
000099 940e 0273 	CALL __MODW21
00009b 940e 01dc 	CALL SUBOPT_0x0
                 ; 0000 0033 uart_char_send(chuc+0x30);
                 ; 0000 0034 uart_char_send(dvi+0x30);
                 ; 0000 0035 uart_char_send(13);
00009d 940e 01e7 	CALL SUBOPT_0x1
                 ; 0000 0036 delay_ms(200);
                 ; 0000 0037 
                 ; 0000 0038 }
00009f 91e9      	LD   R30,Y+
0000a0 bfef      	OUT  SREG,R30
0000a1 91f9      	LD   R31,Y+
0000a2 91e9      	LD   R30,Y+
0000a3 91b9      	LD   R27,Y+
0000a4 91a9      	LD   R26,Y+
0000a5 9199      	LD   R25,Y+
0000a6 9189      	LD   R24,Y+
0000a7 9179      	LD   R23,Y+
0000a8 9169      	LD   R22,Y+
0000a9 90f9      	LD   R15,Y+
0000aa 9019      	LD   R1,Y+
0000ab 9009      	LD   R0,Y+
0000ac 9518      	RETI
                 ;
                 ;//Ngat Timer1
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 003C {
                 _timer1_ovf_isr:
0000ad 93ea      	ST   -Y,R30
                 ; 0000 003D   PORTB.0 =~PORTB.0;
0000ae 9bc0      	SBIS 0x18,0
0000af c002      	RJMP _0xD
0000b0 98c0      	CBI  0x18,0
0000b1 c001      	RJMP _0xE
                 _0xD:
0000b2 9ac0      	SBI  0x18,0
                 _0xE:
                 ; 0000 003E   TCNT1H = timer1;
0000b3 bccd      	OUT  0x2D,R12
                 ; 0000 003F   TCNT1L = timer2;
0000b4 91e0 016c 	LDS  R30,_timer2
0000b6 bdec      	OUT  0x2C,R30
                 ; 0000 0040  }
0000b7 91e9      	LD   R30,Y+
0000b8 9518      	RETI
                 ;
                 ;// Ngat UART
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0044 
                 ; 0000 0045 {
                 _usart_rx_isr:
0000b9 93ea      	ST   -Y,R30
0000ba 93fa      	ST   -Y,R31
0000bb b7ef      	IN   R30,SREG
0000bc 93ea      	ST   -Y,R30
                 ; 0000 0046 char data;
                 ; 0000 0047 data= UDR;
0000bd 931a      	ST   -Y,R17
                 ;	data -> R17
0000be b11c      	IN   R17,12
                 ; 0000 0048 
                 ; 0000 0049 //Dieu khien thoi gian nhay den
                 ; 0000 004A         if(data == 'z')
0000bf 371a      	CPI  R17,122
0000c0 f439      	BRNE _0xF
                 ; 0000 004B         {
                 ; 0000 004C            timer1=0xF0;
0000c1 efe0      	LDI  R30,LOW(240)
0000c2 e0f0      	LDI  R31,HIGH(240)
0000c3 016f      	MOVW R12,R30
                 ; 0000 004D            timer2=0xBD;
0000c4 ebed      	LDI  R30,LOW(189)
0000c5 e0f0      	LDI  R31,HIGH(189)
0000c6 940e 01f1 	CALL SUBOPT_0x2
                 ; 0000 004E         }
                 ; 0000 004F         if(data == 'x')
                 _0xF:
0000c8 3718      	CPI  R17,120
0000c9 f439      	BRNE _0x10
                 ; 0000 0050         {
                 ; 0000 0051            timer1=0xE1;
0000ca eee1      	LDI  R30,LOW(225)
0000cb e0f0      	LDI  R31,HIGH(225)
0000cc 016f      	MOVW R12,R30
                 ; 0000 0052            timer2=0x7B;
0000cd e7eb      	LDI  R30,LOW(123)
0000ce e0f0      	LDI  R31,HIGH(123)
0000cf 940e 01f1 	CALL SUBOPT_0x2
                 ; 0000 0053         }
                 ; 0000 0054         if(data == 'v')
                 _0x10:
0000d1 3716      	CPI  R17,118
0000d2 f439      	BRNE _0x11
                 ; 0000 0055         {
                 ; 0000 0056            timer1=0xD2;
0000d3 ede2      	LDI  R30,LOW(210)
0000d4 e0f0      	LDI  R31,HIGH(210)
0000d5 016f      	MOVW R12,R30
                 ; 0000 0057            timer2=0x39  ;
0000d6 e3e9      	LDI  R30,LOW(57)
0000d7 e0f0      	LDI  R31,HIGH(57)
0000d8 940e 01f1 	CALL SUBOPT_0x2
                 ; 0000 0058         }
                 ; 0000 0059         if(data == 'n')
                 _0x11:
0000da 361e      	CPI  R17,110
0000db f439      	BRNE _0x12
                 ; 0000 005A         {
                 ; 0000 005B            timer1=0xC2;
0000dc ece2      	LDI  R30,LOW(194)
0000dd e0f0      	LDI  R31,HIGH(194)
0000de 016f      	MOVW R12,R30
                 ; 0000 005C            timer2=0xF8;
0000df efe8      	LDI  R30,LOW(248)
0000e0 e0f0      	LDI  R31,HIGH(248)
0000e1 940e 01f1 	CALL SUBOPT_0x2
                 ; 0000 005D         }
                 ; 0000 005E         if(data == 'm')
                 _0x12:
0000e3 361d      	CPI  R17,109
0000e4 f439      	BRNE _0x13
                 ; 0000 005F         {
                 ; 0000 0060            timer1=0xB3;
0000e5 ebe3      	LDI  R30,LOW(179)
0000e6 e0f0      	LDI  R31,HIGH(179)
0000e7 016f      	MOVW R12,R30
                 ; 0000 0061            timer2=0xB4;
0000e8 ebe4      	LDI  R30,LOW(180)
0000e9 e0f0      	LDI  R31,HIGH(180)
0000ea 940e 01f1 	CALL SUBOPT_0x2
                 ; 0000 0062         }
                 ; 0000 0063         if(data == 'r')
                 _0x13:
0000ec 3712      	CPI  R17,114
0000ed f439      	BRNE _0x14
                 ; 0000 0064         {
                 ; 0000 0065            timer1=0xA4;
0000ee eae4      	LDI  R30,LOW(164)
0000ef e0f0      	LDI  R31,HIGH(164)
0000f0 016f      	MOVW R12,R30
                 ; 0000 0066            timer2=0x72;
0000f1 e7e2      	LDI  R30,LOW(114)
0000f2 e0f0      	LDI  R31,HIGH(114)
0000f3 940e 01f1 	CALL SUBOPT_0x2
                 ; 0000 0067         }
                 ; 0000 0068         if(data == 't')
                 _0x14:
0000f5 3714      	CPI  R17,116
0000f6 f439      	BRNE _0x15
                 ; 0000 0069         {
                 ; 0000 006A            timer1=0x95;
0000f7 e9e5      	LDI  R30,LOW(149)
0000f8 e0f0      	LDI  R31,HIGH(149)
0000f9 016f      	MOVW R12,R30
                 ; 0000 006B            timer2=0x30;
0000fa e3e0      	LDI  R30,LOW(48)
0000fb e0f0      	LDI  R31,HIGH(48)
0000fc 940e 01f1 	CALL SUBOPT_0x2
                 ; 0000 006C         }
                 ; 0000 006D         if(data == 'u')
                 _0x15:
0000fe 3715      	CPI  R17,117
0000ff f439      	BRNE _0x16
                 ; 0000 006E         {
                 ; 0000 006F            timer1=0x85;
000100 e8e5      	LDI  R30,LOW(133)
000101 e0f0      	LDI  R31,HIGH(133)
000102 016f      	MOVW R12,R30
                 ; 0000 0070            timer2=0xED;
000103 eeed      	LDI  R30,LOW(237)
000104 e0f0      	LDI  R31,HIGH(237)
000105 940e 01f1 	CALL SUBOPT_0x2
                 ; 0000 0071         }
                 ; 0000 0072         if(data == 'j')
                 _0x16:
000107 361a      	CPI  R17,106
000108 f439      	BRNE _0x17
                 ; 0000 0073         {
                 ; 0000 0074            timer1=0x76;
000109 e7e6      	LDI  R30,LOW(118)
00010a e0f0      	LDI  R31,HIGH(118)
00010b 016f      	MOVW R12,R30
                 ; 0000 0075            timer2=0xAD;
00010c eaed      	LDI  R30,LOW(173)
00010d e0f0      	LDI  R31,HIGH(173)
00010e 940e 01f1 	CALL SUBOPT_0x2
                 ; 0000 0076         }
                 ; 0000 0077         if(data == 'k')
                 _0x17:
000110 361b      	CPI  R17,107
000111 f439      	BRNE _0x18
                 ; 0000 0078         {
                 ; 0000 0079            timer1=0x67;
000112 e6e7      	LDI  R30,LOW(103)
000113 e0f0      	LDI  R31,HIGH(103)
000114 016f      	MOVW R12,R30
                 ; 0000 007A            timer2=0x69;
000115 e6e9      	LDI  R30,LOW(105)
000116 e0f0      	LDI  R31,HIGH(105)
000117 940e 01f1 	CALL SUBOPT_0x2
                 ; 0000 007B         }
                 ; 0000 007C 
                 ; 0000 007D //Dieu khien den
                 ; 0000 007E         if(data == '1' )
                 _0x18:
000119 3311      	CPI  R17,49
00011a f409      	BRNE _0x19
                 ; 0000 007F         {
                 ; 0000 0080             PORTC.0 = 1;
00011b 9aa8      	SBI  0x15,0
                 ; 0000 0081         }
                 ; 0000 0082         if(data == '2')
                 _0x19:
00011c 3312      	CPI  R17,50
00011d f409      	BRNE _0x1C
                 ; 0000 0083         {
                 ; 0000 0084             PORTC.1 = 1;
00011e 9aa9      	SBI  0x15,1
                 ; 0000 0085             }
                 ; 0000 0086         if ( data == '3')
                 _0x1C:
00011f 3313      	CPI  R17,51
000120 f409      	BRNE _0x1F
                 ; 0000 0087         {
                 ; 0000 0088         PORTC.2 = 1;
000121 9aaa      	SBI  0x15,2
                 ; 0000 0089         }
                 ; 0000 008A          if ( data == '4')
                 _0x1F:
000122 3314      	CPI  R17,52
000123 f409      	BRNE _0x22
                 ; 0000 008B         {
                 ; 0000 008C         PORTC.3 = 1;
000124 9aab      	SBI  0x15,3
                 ; 0000 008D         }
                 ; 0000 008E          if ( data == '5')
                 _0x22:
000125 3315      	CPI  R17,53
000126 f409      	BRNE _0x25
                 ; 0000 008F         {
                 ; 0000 0090         PORTC.4 = 1;
000127 9aac      	SBI  0x15,4
                 ; 0000 0091         }
                 ; 0000 0092          if ( data == '6')
                 _0x25:
000128 3316      	CPI  R17,54
000129 f409      	BRNE _0x28
                 ; 0000 0093         {
                 ; 0000 0094         PORTC.5 = 1;
00012a 9aad      	SBI  0x15,5
                 ; 0000 0095         }
                 ; 0000 0096          if ( data == '7')
                 _0x28:
00012b 3317      	CPI  R17,55
00012c f409      	BRNE _0x2B
                 ; 0000 0097         {
                 ; 0000 0098         PORTC.6 = 1;
00012d 9aae      	SBI  0x15,6
                 ; 0000 0099         }
                 ; 0000 009A          if ( data == '8')
                 _0x2B:
00012e 3318      	CPI  R17,56
00012f f409      	BRNE _0x2E
                 ; 0000 009B         {
                 ; 0000 009C         PORTC.7 = 1;
000130 9aaf      	SBI  0x15,7
                 ; 0000 009D         }
                 ; 0000 009E          if(data == 'a' )
                 _0x2E:
000131 3611      	CPI  R17,97
000132 f409      	BRNE _0x31
                 ; 0000 009F         {
                 ; 0000 00A0             PORTC.0 = 0;
000133 98a8      	CBI  0x15,0
                 ; 0000 00A1         }
                 ; 0000 00A2         if(data == 'b')
                 _0x31:
000134 3612      	CPI  R17,98
000135 f409      	BRNE _0x34
                 ; 0000 00A3         {
                 ; 0000 00A4             PORTC.1 = 0;
000136 98a9      	CBI  0x15,1
                 ; 0000 00A5             }
                 ; 0000 00A6         if ( data == 'c')
                 _0x34:
000137 3613      	CPI  R17,99
000138 f409      	BRNE _0x37
                 ; 0000 00A7         {
                 ; 0000 00A8         PORTC.2 = 0;
000139 98aa      	CBI  0x15,2
                 ; 0000 00A9         }
                 ; 0000 00AA          if ( data == 'd')
                 _0x37:
00013a 3614      	CPI  R17,100
00013b f409      	BRNE _0x3A
                 ; 0000 00AB         {
                 ; 0000 00AC         PORTC.3 = 0;
00013c 98ab      	CBI  0x15,3
                 ; 0000 00AD         }
                 ; 0000 00AE          if ( data == 'e')
                 _0x3A:
00013d 3615      	CPI  R17,101
00013e f409      	BRNE _0x3D
                 ; 0000 00AF         {
                 ; 0000 00B0         PORTC.4 = 0;
00013f 98ac      	CBI  0x15,4
                 ; 0000 00B1         }
                 ; 0000 00B2          if ( data == 'f')
                 _0x3D:
000140 3616      	CPI  R17,102
000141 f409      	BRNE _0x40
                 ; 0000 00B3         {
                 ; 0000 00B4         PORTC.5 = 0;
000142 98ad      	CBI  0x15,5
                 ; 0000 00B5         }
                 ; 0000 00B6          if ( data == 'g')
                 _0x40:
000143 3617      	CPI  R17,103
000144 f409      	BRNE _0x43
                 ; 0000 00B7         {
                 ; 0000 00B8         PORTC.6 = 0;
000145 98ae      	CBI  0x15,6
                 ; 0000 00B9         }
                 ; 0000 00BA          if ( data == 'h')
                 _0x43:
000146 3618      	CPI  R17,104
000147 f409      	BRNE _0x46
                 ; 0000 00BB         {
                 ; 0000 00BC         PORTC.7 = 0;
000148 98af      	CBI  0x15,7
                 ; 0000 00BD         }
                 ; 0000 00BE 
                 ; 0000 00BF 
                 ; 0000 00C0 }
                 _0x46:
000149 9119      	LD   R17,Y+
00014a 91e9      	LD   R30,Y+
00014b bfef      	OUT  SREG,R30
00014c 91f9      	LD   R31,Y+
00014d 91e9      	LD   R30,Y+
00014e 9518      	RETI
                 ;void main(void)
                 ; 0000 00C2 {
                 _main:
                 ; 0000 00C3 // Declare your local variables here
                 ; 0000 00C4 
                 ; 0000 00C5 // Input/Output Ports initialization
                 ; 0000 00C6 // Port A initialization
                 ; 0000 00C7 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00C8 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00C9 PORTA=0x00;
00014f e0e0      	LDI  R30,LOW(0)
000150 bbeb      	OUT  0x1B,R30
                 ; 0000 00CA DDRA=0x00;
000151 bbea      	OUT  0x1A,R30
                 ; 0000 00CB 
                 ; 0000 00CC // Port B initialization
                 ; 0000 00CD // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00CE // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00CF PORTB=0x00;
000152 bbe8      	OUT  0x18,R30
                 ; 0000 00D0 DDRB=0xFF;
000153 efef      	LDI  R30,LOW(255)
000154 bbe7      	OUT  0x17,R30
                 ; 0000 00D1 
                 ; 0000 00D2 // Port C initialization
                 ; 0000 00D3 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00D4 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00D5 PORTC=0x00;
000155 e0e0      	LDI  R30,LOW(0)
000156 bbe5      	OUT  0x15,R30
                 ; 0000 00D6 DDRC=0x00;
000157 bbe4      	OUT  0x14,R30
                 ; 0000 00D7 
                 ; 0000 00D8 // Port D initialization
                 ; 0000 00D9 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00DA // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00DB PORTD=0x00;
000158 bbe2      	OUT  0x12,R30
                 ; 0000 00DC DDRD=0x00;
000159 bbe1      	OUT  0x11,R30
                 ; 0000 00DD 
                 ; 0000 00DE // Timer/Counter 0 initialization
                 ; 0000 00DF // Clock source: System Clock
                 ; 0000 00E0 // Clock value: Timer 0 Stopped
                 ; 0000 00E1 // Mode: Normal top=0xFF
                 ; 0000 00E2 // OC0 output: Disconnected
                 ; 0000 00E3 TCCR0=0x00;
00015a bfe3      	OUT  0x33,R30
                 ; 0000 00E4 TCNT0=0x00;
00015b bfe2      	OUT  0x32,R30
                 ; 0000 00E5 OCR0=0x00;
00015c bfec      	OUT  0x3C,R30
                 ; 0000 00E6 
                 ; 0000 00E7 // Timer/Counter 1 initialization
                 ; 0000 00E8 // Clock source: System Clock
                 ; 0000 00E9 // Clock value: 7.813 kHz
                 ; 0000 00EA // Mode: Normal top=0xFFFF
                 ; 0000 00EB // OC1A output: Discon.
                 ; 0000 00EC // OC1B output: Discon.
                 ; 0000 00ED // Noise Canceler: Off
                 ; 0000 00EE // Input Capture on Falling Edge
                 ; 0000 00EF // Timer1 Overflow Interrupt: on
                 ; 0000 00F0 // Input Capture Interrupt: Off
                 ; 0000 00F1 // Compare A Match Interrupt: Off
                 ; 0000 00F2 // Compare B Match Interrupt: Off
                 ; 0000 00F3 TCCR1A=0x00;
00015d bdef      	OUT  0x2F,R30
                 ; 0000 00F4 TCCR1B=0x05;
00015e e0e5      	LDI  R30,LOW(5)
00015f bdee      	OUT  0x2E,R30
                 ; 0000 00F5 TCNT1H=timer1;
000160 bccd      	OUT  0x2D,R12
                 ; 0000 00F6 TCNT1L=timer2;
000161 91e0 016c 	LDS  R30,_timer2
000163 bdec      	OUT  0x2C,R30
                 ; 0000 00F7 ICR1H=0x00;
000164 e0e0      	LDI  R30,LOW(0)
000165 bde7      	OUT  0x27,R30
                 ; 0000 00F8 ICR1L=0x00;
000166 bde6      	OUT  0x26,R30
                 ; 0000 00F9 OCR1AH=0x00;
000167 bdeb      	OUT  0x2B,R30
                 ; 0000 00FA OCR1AL=0x00;
000168 bdea      	OUT  0x2A,R30
                 ; 0000 00FB OCR1BH=0x00;
000169 bde9      	OUT  0x29,R30
                 ; 0000 00FC OCR1BL=0x00;
00016a bde8      	OUT  0x28,R30
                 ; 0000 00FD 
                 ; 0000 00FE // Timer/Counter 2 initialization
                 ; 0000 00FF // Clock source: System Clock
                 ; 0000 0100 // Clock value: Timer2 Stopped
                 ; 0000 0101 // Mode: Normal top=0xFF
                 ; 0000 0102 // OC2 output: Disconnected
                 ; 0000 0103 ASSR=0x00;
00016b bde2      	OUT  0x22,R30
                 ; 0000 0104 TCCR2=0x00;
00016c bde5      	OUT  0x25,R30
                 ; 0000 0105 TCNT2=0x00;
00016d bde4      	OUT  0x24,R30
                 ; 0000 0106 OCR2=0x00;
00016e bde3      	OUT  0x23,R30
                 ; 0000 0107 
                 ; 0000 0108 // External Interrupt(s) initialization
                 ; 0000 0109 // INT0: On
                 ; 0000 010A // INT0: Falling Edge
                 ; 0000 010B // INT1: Off
                 ; 0000 010C // INT2: Off
                 ; 0000 010D GICR|=0x40;
00016f b7eb      	IN   R30,0x3B
000170 64e0      	ORI  R30,0x40
000171 bfeb      	OUT  0x3B,R30
                 ; 0000 010E MCUCR=0x02;
000172 e0e2      	LDI  R30,LOW(2)
000173 bfe5      	OUT  0x35,R30
                 ; 0000 010F MCUCSR=0x00;
000174 e0e0      	LDI  R30,LOW(0)
000175 bfe4      	OUT  0x34,R30
                 ; 0000 0110 GIFR=0x40;
000176 e4e0      	LDI  R30,LOW(64)
000177 bfea      	OUT  0x3A,R30
                 ; 0000 0111 
                 ; 0000 0112 TCCR1B=0X05;
000178 e0e5      	LDI  R30,LOW(5)
000179 bdee      	OUT  0x2E,R30
                 ; 0000 0113 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0114 TIMSK=0x04;
00017a e0e4      	LDI  R30,LOW(4)
00017b bfe9      	OUT  0x39,R30
                 ; 0000 0115 
                 ; 0000 0116 
                 ; 0000 0117 
                 ; 0000 0118 // USART initialization
                 ; 0000 0119 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 011A // USART Receiver: On
                 ; 0000 011B // USART Transmitter: On
                 ; 0000 011C // USART Mode: Asynchronous
                 ; 0000 011D // USART Baud Rate: 9600
                 ; 0000 011E UCSRA=0x00;
00017c e0e0      	LDI  R30,LOW(0)
00017d b9eb      	OUT  0xB,R30
                 ; 0000 011F UCSRB=0x98;
00017e e9e8      	LDI  R30,LOW(152)
00017f b9ea      	OUT  0xA,R30
                 ; 0000 0120 UCSRC=0x86;
000180 e8e6      	LDI  R30,LOW(134)
000181 bde0      	OUT  0x20,R30
                 ; 0000 0121 UBRRH=0x00;
000182 e0e0      	LDI  R30,LOW(0)
000183 bde0      	OUT  0x20,R30
                 ; 0000 0122 UBRRL=0x33;
000184 e3e3      	LDI  R30,LOW(51)
000185 b9e9      	OUT  0x9,R30
                 ; 0000 0123 
                 ; 0000 0124 // Analog Comparator initialization
                 ; 0000 0125 // Analog Comparator: Off
                 ; 0000 0126 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 0127 ACSR=0x80;
000186 e8e0      	LDI  R30,LOW(128)
000187 b9e8      	OUT  0x8,R30
                 ; 0000 0128 SFIOR=0x00;
000188 e0e0      	LDI  R30,LOW(0)
000189 bfe0      	OUT  0x30,R30
                 ; 0000 0129 
                 ; 0000 012A // ADC initialization
                 ; 0000 012B // ADC Clock frequency: 1000.000 kHz
                 ; 0000 012C // ADC Voltage Reference: AREF pin
                 ; 0000 012D // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 012E ADMUX=ADC_VREF_TYPE & 0xff;
00018a b9e7      	OUT  0x7,R30
                 ; 0000 012F ADCSRA=0x83;
00018b e8e3      	LDI  R30,LOW(131)
00018c b9e6      	OUT  0x6,R30
                 ; 0000 0130 
                 ; 0000 0131 // SPI initialization
                 ; 0000 0132 // SPI disabled
                 ; 0000 0133 SPCR=0x00;
00018d e0e0      	LDI  R30,LOW(0)
00018e b9ed      	OUT  0xD,R30
                 ; 0000 0134 
                 ; 0000 0135 // TWI initialization
                 ; 0000 0136 // TWI disabled
                 ; 0000 0137 TWCR=0x00;
00018f bfe6      	OUT  0x36,R30
                 ; 0000 0138 // Global enable interrupts
                 ; 0000 0139 #asm("sei")
000190 9478      	sei
                 ; 0000 013A while (1)
                 _0x49:
                 ; 0000 013B       {
                 ; 0000 013C       // Place your code here
                 ; 0000 013D         ADC_out=read_adc(0);
000191 e0e0      	LDI  R30,LOW(0)
000192 93ea      	ST   -Y,R30
000193 deda      	RCALL _read_adc
000194 2766      	CLR  R22
000195 2777      	CLR  R23
000196 93e0 0160 	STS  _ADC_out,R30
000198 93f0 0161 	STS  _ADC_out+1,R31
00019a 9360 0162 	STS  _ADC_out+2,R22
00019c 9370 0163 	STS  _ADC_out+3,R23
                 ; 0000 013E         dienap = ADC_out*5000/1023;
                +
00019e e8a8     +LDI R26 , LOW ( 0x1388 )
00019f e1b3     +LDI R27 , HIGH ( 0x1388 )
0001a0 e080     +LDI R24 , BYTE3 ( 0x1388 )
0001a1 e090     +LDI R25 , BYTE4 ( 0x1388 )
                 	__GETD2N 0x1388
0001a2 940e 0216 	CALL __MULD12U
0001a4 01df      	MOVW R26,R30
0001a5 01cb      	MOVW R24,R22
                +
0001a6 efef     +LDI R30 , LOW ( 0x3FF )
0001a7 e0f3     +LDI R31 , HIGH ( 0x3FF )
0001a8 e060     +LDI R22 , BYTE3 ( 0x3FF )
0001a9 e070     +LDI R23 , BYTE4 ( 0x3FF )
                 	__GETD1N 0x3FF
0001aa 940e 024e 	CALL __DIVD21U
0001ac 93e0 0168 	STS  _dienap,R30
0001ae 93f0 0169 	STS  _dienap+1,R31
0001b0 9360 016a 	STS  _dienap+2,R22
0001b2 9370 016b 	STS  _dienap+3,R23
                 ; 0000 013F         nhietdo=dienap/10;
0001b4 91a0 0168 	LDS  R26,_dienap
0001b6 91b0 0169 	LDS  R27,_dienap+1
0001b8 9180 016a 	LDS  R24,_dienap+2
0001ba 9190 016b 	LDS  R25,_dienap+3
0001bc 940e 01f6 	CALL SUBOPT_0x3
0001be 93e0 0164 	STS  _nhietdo,R30
0001c0 93f0 0165 	STS  _nhietdo+1,R31
0001c2 9360 0166 	STS  _nhietdo+2,R22
0001c4 9370 0167 	STS  _nhietdo+3,R23
                 ; 0000 0140         chuc=nhietdo/10;
0001c6 940e 01fd 	CALL SUBOPT_0x4
0001c8 940e 01f6 	CALL SUBOPT_0x3
0001ca 012f      	MOVW R4,R30
                 ; 0000 0141         dvi=nhietdo%10;
0001cb 940e 01fd 	CALL SUBOPT_0x4
                +
0001cd e0ea     +LDI R30 , LOW ( 0xA )
0001ce e0f0     +LDI R31 , HIGH ( 0xA )
0001cf e060     +LDI R22 , BYTE3 ( 0xA )
0001d0 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
0001d1 940e 0281 	CALL __MODD21U
0001d3 940e 01dc 	CALL SUBOPT_0x0
                 ; 0000 0142         uart_char_send(chuc + 0x30);
                 ; 0000 0143         uart_char_send(dvi + 0x30);
                 ; 0000 0144         uart_char_send(10);
0001d5 e0ea      	LDI  R30,LOW(10)
0001d6 93ea      	ST   -Y,R30
0001d7 dea2      	RCALL _uart_char_send
                 ; 0000 0145         uart_char_send(13);
0001d8 940e 01e7 	CALL SUBOPT_0x1
                 ; 0000 0146         delay_ms(200);
                 ; 0000 0147       }
0001da cfb6      	RJMP _0x49
                 ; 0000 0148 }
                 _0x4C:
0001db cfff      	RJMP _0x4C
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _ADC_out:
000160           	.BYTE 0x4
                 _nhietdo:
000164           	.BYTE 0x4
                 _dienap:
000168           	.BYTE 0x4
                 _timer2:
00016c           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
0001dc 013f      	MOVW R6,R30
0001dd 2de4      	MOV  R30,R4
0001de 5de0      	SUBI R30,-LOW(48)
0001df 93ea      	ST   -Y,R30
0001e0 940e 007a 	CALL _uart_char_send
0001e2 2de6      	MOV  R30,R6
0001e3 5de0      	SUBI R30,-LOW(48)
0001e4 93ea      	ST   -Y,R30
0001e5 940c 007a 	JMP  _uart_char_send
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0001e7 e0ed      	LDI  R30,LOW(13)
0001e8 93ea      	ST   -Y,R30
0001e9 940e 007a 	CALL _uart_char_send
0001eb ece8      	LDI  R30,LOW(200)
0001ec e0f0      	LDI  R31,HIGH(200)
0001ed 93fa      	ST   -Y,R31
0001ee 93ea      	ST   -Y,R30
0001ef 940c 0206 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2:
0001f1 93e0 016c 	STS  _timer2,R30
0001f3 93f0 016d 	STS  _timer2+1,R31
0001f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
                +
0001f6 e0ea     +LDI R30 , LOW ( 0xA )
0001f7 e0f0     +LDI R31 , HIGH ( 0xA )
0001f8 e060     +LDI R22 , BYTE3 ( 0xA )
0001f9 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
0001fa 940e 024e 	CALL __DIVD21U
0001fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0001fd 91a0 0164 	LDS  R26,_nhietdo
0001ff 91b0 0165 	LDS  R27,_nhietdo+1
000201 9180 0166 	LDS  R24,_nhietdo+2
000203 9190 0167 	LDS  R25,_nhietdo+3
000205 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000206 91e9      	ld   r30,y+
000207 91f9      	ld   r31,y+
000208 9630      	adiw r30,0
000209 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00020a ed80     +LDI R24 , LOW ( 0x7D0 )
00020b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00020c 9701     +SBIW R24 , 1
00020d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00020e 95a8      	wdr
00020f 9731      	sbiw r30,1
000210 f7c9      	brne __delay_ms0
                 __delay_ms1:
000211 9508      	ret
                 
                 __ANEGW1:
000212 95f1      	NEG  R31
000213 95e1      	NEG  R30
000214 40f0      	SBCI R31,0
000215 9508      	RET
                 
                 __MULD12U:
000216 9f7a      	MUL  R23,R26
000217 2d70      	MOV  R23,R0
000218 9f6b      	MUL  R22,R27
000219 0d70      	ADD  R23,R0
00021a 9ff8      	MUL  R31,R24
00021b 0d70      	ADD  R23,R0
00021c 9fe9      	MUL  R30,R25
00021d 0d70      	ADD  R23,R0
00021e 9f6a      	MUL  R22,R26
00021f 2d60      	MOV  R22,R0
000220 0d71      	ADD  R23,R1
000221 9ffb      	MUL  R31,R27
000222 0d60      	ADD  R22,R0
000223 1d71      	ADC  R23,R1
000224 9fe8      	MUL  R30,R24
000225 0d60      	ADD  R22,R0
000226 1d71      	ADC  R23,R1
000227 2788      	CLR  R24
000228 9ffa      	MUL  R31,R26
000229 2df0      	MOV  R31,R0
00022a 0d61      	ADD  R22,R1
00022b 1f78      	ADC  R23,R24
00022c 9feb      	MUL  R30,R27
00022d 0df0      	ADD  R31,R0
00022e 1d61      	ADC  R22,R1
00022f 1f78      	ADC  R23,R24
000230 9fea      	MUL  R30,R26
000231 2de0      	MOV  R30,R0
000232 0df1      	ADD  R31,R1
000233 1f68      	ADC  R22,R24
000234 1f78      	ADC  R23,R24
000235 9508      	RET
                 
                 __DIVW21U:
000236 2400      	CLR  R0
000237 2411      	CLR  R1
000238 e190      	LDI  R25,16
                 __DIVW21U1:
000239 0faa      	LSL  R26
00023a 1fbb      	ROL  R27
00023b 1c00      	ROL  R0
00023c 1c11      	ROL  R1
00023d 1a0e      	SUB  R0,R30
00023e 0a1f      	SBC  R1,R31
00023f f418      	BRCC __DIVW21U2
000240 0e0e      	ADD  R0,R30
000241 1e1f      	ADC  R1,R31
000242 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000243 60a1      	SBR  R26,1
                 __DIVW21U3:
000244 959a      	DEC  R25
000245 f799      	BRNE __DIVW21U1
000246 01fd      	MOVW R30,R26
000247 01d0      	MOVW R26,R0
000248 9508      	RET
                 
                 __DIVW21:
000249 d03b      	RCALL __CHKSIGNW
00024a dfeb      	RCALL __DIVW21U
00024b f40e      	BRTC __DIVW211
00024c dfc5      	RCALL __ANEGW1
                 __DIVW211:
00024d 9508      	RET
                 
                 __DIVD21U:
00024e 933f      	PUSH R19
00024f 934f      	PUSH R20
000250 935f      	PUSH R21
000251 2400      	CLR  R0
000252 2411      	CLR  R1
000253 2744      	CLR  R20
000254 2755      	CLR  R21
000255 e230      	LDI  R19,32
                 __DIVD21U1:
000256 0faa      	LSL  R26
000257 1fbb      	ROL  R27
000258 1f88      	ROL  R24
000259 1f99      	ROL  R25
00025a 1c00      	ROL  R0
00025b 1c11      	ROL  R1
00025c 1f44      	ROL  R20
00025d 1f55      	ROL  R21
00025e 1a0e      	SUB  R0,R30
00025f 0a1f      	SBC  R1,R31
000260 0b46      	SBC  R20,R22
000261 0b57      	SBC  R21,R23
000262 f428      	BRCC __DIVD21U2
000263 0e0e      	ADD  R0,R30
000264 1e1f      	ADC  R1,R31
000265 1f46      	ADC  R20,R22
000266 1f57      	ADC  R21,R23
000267 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000268 60a1      	SBR  R26,1
                 __DIVD21U3:
000269 953a      	DEC  R19
00026a f759      	BRNE __DIVD21U1
00026b 01fd      	MOVW R30,R26
00026c 01bc      	MOVW R22,R24
00026d 01d0      	MOVW R26,R0
00026e 01ca      	MOVW R24,R20
00026f 915f      	POP  R21
000270 914f      	POP  R20
000271 913f      	POP  R19
000272 9508      	RET
                 
                 __MODW21:
000273 94e8      	CLT
000274 ffb7      	SBRS R27,7
000275 c004      	RJMP __MODW211
000276 95a0      	COM  R26
000277 95b0      	COM  R27
000278 9611      	ADIW R26,1
000279 9468      	SET
                 __MODW211:
00027a fdf7      	SBRC R31,7
00027b df96      	RCALL __ANEGW1
00027c dfb9      	RCALL __DIVW21U
00027d 01fd      	MOVW R30,R26
00027e f40e      	BRTC __MODW212
00027f df92      	RCALL __ANEGW1
                 __MODW212:
000280 9508      	RET
                 
                 __MODD21U:
000281 dfcc      	RCALL __DIVD21U
000282 01fd      	MOVW R30,R26
000283 01bc      	MOVW R22,R24
000284 9508      	RET
                 
                 __CHKSIGNW:
000285 94e8      	CLT
000286 fff7      	SBRS R31,7
000287 c002      	RJMP __CHKSW1
000288 df89      	RCALL __ANEGW1
000289 9468      	SET
                 __CHKSW1:
00028a ffb7      	SBRS R27,7
00028b c006      	RJMP __CHKSW2
00028c 95a0      	COM  R26
00028d 95b0      	COM  R27
00028e 9611      	ADIW R26,1
00028f f800      	BLD  R0,0
000290 9403      	INC  R0
000291 fa00      	BST  R0,0
                 __CHKSW2:
000292 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  29 r1 :  17 r2 :   0 r3 :   0 r4 :   3 r5 :   0 r6 :   2 r7 :   0 
r8 :   0 r9 :   0 r10:   4 r11:   0 r12:  12 r13:   0 r14:   0 r15:   2 
r16:   0 r17:  29 r18:   0 r19:   4 r20:   7 r21:   6 r22:  24 r23:  22 
r24:  28 r25:  12 r26:  29 r27:  16 r28:   2 r29:   1 r30: 176 r31:  56 
x  :   3 y  :  45 z  :   7 
Registers used: 24 out of 35 (68.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  11 add   :  11 
adiw  :   5 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  34 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  26 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   0 cpc   :   0 cpi   :  26 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   1 jmp   :  24 ld    :  21 ldd   :   0 ldi   : 102 
lds   :  10 lpm   :   7 lsl   :   2 lsr   :   0 mov   :   6 movw  :  31 
mul   :  10 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   1 out   :  56 pop   :   3 push  :   3 rcall :  10 ret   :  13 
reti  :   3 rjmp  :  13 rol   :  10 ror   :   0 sbc   :   4 sbci  :   1 
sbi   :  11 sbic  :   0 sbis  :   3 sbiw  :   5 sbr   :   2 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  27 std   :   0 sts   :  14 sub   :   2 subi  :   2 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 53 out of 116 (45.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000526   1278     40   1318   16384   8.0%
[.dseg] 0x000060 0x00016e      0     14     14    1119   1.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
